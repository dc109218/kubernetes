# perfect.plus, graph.perfect.plus, hum.perfect.plus
# openssl x509 -text -noout -in perfect_plus.ca-bundle.crt
# openssl rsa -text -noout -in /rit/k8s/prod/ssl/perfect_plus.key
# kubectl create secret tls -n wprod perfect-plus-tls --cert=perfect_plus.crt --key=perfect_plus.key (workind)
# kubectl create secret tls -n wprod perfect-plus-tls3 --cert=./1872526759repl_2.crt  --key=./perfect_plus.key
# kubectl create secret tls -n wprod perfect-plus-tls4 --cert=./1872526759repl_2.crt  --key=./perfect_plus.key
# kubectl create secret generic -n wprod perfect-plus-tls4 --from-file=perfect_plus.p7b.pem=perfect_plus.crt --from-file=ca-bundle.pem=perfect_plus.ca-bundle

# cat perfect_plus.crt 1872526759repl_1.ca-bundle >> perfect_full_chain.crt

apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: perfect-plus-tls
  namespace: aprod
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdOakNDQlI2Z0F3SUJBZ0lRY2JsdDZBM2RGb3lCTWVua0xjdkg4ekFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKanpFTE1Ba0dBMVVFQmhNQ1IwSXhHekFaQmdOVkJBZ1RFa2R5WldGMFpYSWdUV0Z1WTJobGMzUmxjakVRTUE0RwpBMVVFQnhNSFUyRnNabTl5WkRFWU1CWUdBMVVFQ2hNUFUyVmpkR2xuYnlCTWFXMXBkR1ZrTVRjd05RWURWUVFECkV5NVRaV04wYVdkdklGSlRRU0JFYjIxaGFXNGdWbUZzYVdSaGRHbHZiaUJUWldOMWNtVWdVMlZ5ZG1WeUlFTkIKTUI0WERUSXpNVEF3TnpBd01EQXdNRm9YRFRJME1UQXdOekl6TlRrMU9Wb3dFekVSTUE4R0ExVUVBeE1JY25KeQpMbkJzZFhNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURDVFBScjlGczhZcUtxCnlzS1diamtVdEdOYXFKK1JjanJNaE1IeHdwRDBUb3c0b3FxU09KRmdUY29qZGR3bW15SDRiRUVLYVY2dUFobUQKRjg2VzBLTjFWV0MxVXhKN1g1SUN1b3JpMm4vNXhSaCtRSVRxWnJJVEFqRFVIbk55bjQ1NVdzTDlWYXpwak53MAo2Q0lYalN2ZXp5TUhXcXhJeXNYWW1xa2hUQkpQVzE5VHo4S2JWdmVrdmFlZEgrZ2ZQMVJkVldpYW83Qk9mMkszClR6QVptRjl3QzNFbmdTSG8zNXA5Y1lZT210bGxGeGVrR1NRSzdBS0V2czgzamlBcXNweFl1bHNaVVk0eG80RFcKQzlMQlZoT2lLT1FEZi9sN0VGOERzZE1Pakh6WEJSb2UwVkZ6VHJRcGs2d2ZuaTRmNE9hMERNN1VaV05vSXIvbApnbWozdkJqekFnTUJBQUdqZ2dNSE1JSURBekFmQmdOVkhTTUVHREFXZ0JTTmpGN0VWSzJLNFhmcG0vbWJCZUc0CkFZMWg0VEFkQmdOVkhRNEVGZ1FVMW5nYjhBa2crMUlQMDNYenVycy9BNTM0VmpFd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01Bd0dBMVVkRXdFQi93UUNNQUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQwpNRWtHQTFVZElBUkNNRUF3TkFZTEt3WUJCQUd5TVFFQ0FnY3dKVEFqQmdnckJnRUZCUWNDQVJZWGFIUjBjSE02Ckx5OXpaV04wYVdkdkxtTnZiUzlEVUZNd0NBWUdaNEVNQVFJQk1JR0VCZ2dyQmdFRkJRY0JBUVI0TUhZd1R3WUkKS3dZQkJRVUhNQUtHUTJoMGRIQTZMeTlqY25RdWMyVmpkR2xuYnk1amIyMHZVMlZqZEdsbmIxSlRRVVJ2YldGcApibFpoYkdsa1lYUnBiMjVUWldOMWNtVlRaWEoyWlhKRFFTNWpjblF3SXdZSUt3WUJCUVVITUFHR0YyaDBkSEE2Ckx5OXZZM053TG5ObFkzUnBaMjh1WTI5dE1JSUJmUVlLS3dZQkJBSFdlUUlFQWdTQ0FXMEVnZ0ZwQVdjQWRRQjIKLzRnL0NyYjdsVkhDWWN6MWg3bzB0S1ROdXluY2FFSUtuK1puVEZvNmRBQUFBWXNKbTBsSUFBQUVBd0JHTUVRQwpJR05wOUtVUHFNdnNCWWpkY1NqUWZHN2VMWkkwM2c5MW0zTkhvZ2tmMFdjNEFpQVFZN0YvWEtXb2xyem5KdnkxCjNjRFpBbi92VjBFTmpDOXE4NEdQdWFDTmhnQjJBTnEydjJzL3RiWWluNXZDdTF4cjZIQ1JjV3k3VVlTRk5MMmsKUFRCSTEvdXJBQUFCaXdtYlNhVUFBQVFEQUVjd1JRSWdNOWJMbkFpbUNXNXJIZ1lmSCtCVWxqYTI4a0N2QThaego1UktRWlRxNFpaWUNJUUNub0hpQmR5SllaMU9XME1RUkluUkR4NmYxeWN3NGFjVDBEekdSSXY0alRBQjJBTzdOCjBHVFYyeHJPeFZ5M25iVE5FNkl5aDBaOHZPemV3MUZJV1VaeEg3V2JBQUFCaXdtYlNYZ0FBQVFEQUVjd1JRSWgKQU1waW9waXhTMW1aNUVKdEg0UmdsRmlnZ1lGZzlyMlh2eDZ6S1YzK3ZGc0FBaUFXanY1MEppaGxScEF4T2MrcgpvZE0wZ2U5TEZ2cFZuK3hiREhIekpTZkFwakF4QmdOVkhSRUVLakFvZ2doeWNuSXVjR3gxYzRJT1ozSmhjR2d1CmNuSnlMbkJzZFhPQ0RHaDFiUzV5Y25JdWNHeDFjekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBdE1LWE0zQmEKYmU0dnE3c0QrOVhHVU9CTWFuUzZqaG1WK2lpdDBRMit5dGlmc0szdXowVklNZElMTFVEU0dJZGw3c2RkYi9PawpYTnRpNFplSkxKb0QwVmhjTDhOYURVTUd3NEhZWEhVZjE0SXhCYVpTR0QzSGJOS1ZkRml5Q3hDTUtzMHRIZi9iCmJNOW0zd1pJcUVWTjdEQnZsSjc2amJFbkdjQVZLMjNqMjA4U0tUK1B5U3prYmhka1QvK2dUTlZFV1BzUXVHR2EKL290NFlGajRPTFFKd1NKQjRHM25pYWxsay93TWdOL3pUY0NVcDdrbGJQUGVqMTNsWFdaaFdpYUsvOHhKVmFCMQp5cENYbG5wUHJuTTVIMEVLb3dBenVTQWhWRHFmbitXUUdTY3NCbkMrNGNjUVp6QmRLbmtmMUEzKzdUNWJqWDhsCnQ2Zi85U3l3bGluUjVBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd2t6MGEvUmJQR0tpcXNyQ2xtNDVGTFJqV3FpZmtYSTZ6SVRCOGNLUTlFNk1PS0txCmtqaVJZRTNLSTNYY0pwc2grR3hCQ21sZXJnSVpneGZPbHRDamRWVmd0Vk1TZTErU0FycUs0dHAvK2NVWWZrQ0UKNm1heUV3SXcxQjV6Y3ArT2VWckMvVldzNll6Y05PZ2lGNDByM3M4akIxcXNTTXJGMkpxcElVd1NUMXRmVTgvQwptMWIzcEwybm5SL29IejlVWFZWb21xT3dUbjlpdDA4d0daaGZjQXR4SjRFaDZOK2FmWEdHRHByWlpSY1hwQmtrCkN1d0NoTDdQTjQ0Z0tyS2NXTHBiR1ZHT01hT0ExZ3ZTd1ZZVG9pamtBMy81ZXhCZkE3SFREb3g4MXdVYUh0RlIKYzA2MEtaT3NINTR1SCtEbXRBek8xR1ZqYUNLLzVZSm85N3dZOHdJREFRQUJBb0lCQVFDQXdNWG5FNUd4dmhyVQoybTkvaDZMRG1aV002ZGh6WlNLWmpBK0l5TW1OV3MrSWFDSm5xcHlMR0lFdVpsZHdMYlNoRGZzN2p2OXloMm1vCmVRb28zakN5KzlTTjAzS1gxb2pHemg1aW5TL1lyMGEvd3JsUktxUXQvSEdtM2xiYVNlajdlYTFrZW5XT2ZnMGQKOGdWRlhnTUlMbktqMk8zNWZvVUVOOWlEZkFsV0U2bmpRZHFlZFRuMHRManBFZDJUNXFHVnRvVENHbDcyZWVzRwpzS0tvTGQyUDlGQzVPc2FBdURpWE84MENXZXFaa3U0RkNRRXN6Q0hnSGpRVTBxblhsMXhES3U2OE42WmFkbzNECndESXFrODNkUzh0VUtSSjQ2dTlUaVlBYzZyUWVUaDVWRVFMTW9TTnV0WmNML1VPWjlES1pZL2l6UFFtelJzWVgKM3NYQXZEaEJBb0dCQVBGV1NOS1VvbmhFMEV0RmV4YnRsY2RvcnpvRk5JNGozQ3RmOUxYR0Q5dFRoQ2UvbWhpRgpIOEdLMlpuTEJ2R3htZTVGcEpGa1MzZXhKemhvNHVEaENERXBPM091QndyRTZuUWViQVZRMzl3aVFFUXNSalBECkUwMGVxZ1RLemxOeGRGUGlHRUpwY1V4bkpZZ252b3Rxa1V2QXQrb3E3aU1lTkUzcXlQQndWWU5wQW9HQkFNNGIKRXN4M2dsZVB3UE9SdEFLYkQzT1BDNmNMNXNTeGdYY2tvdTNRRFYvNkw1MTA4ZHh6VjhMSlRjbk5UMzc5R0NhRQpIZ0FZWGFIV29pYkRzRHIxbjBROXhCTUZySXB3V1VUMnUvM3k5aHVyYlJ6UG9YdGltWXBZdEppNXQ0R1p6ZEU2CjNTN1dXRFNxQlFtUzRieU9ROC80alJIOGFFdmRSb0YwazdYNnR4bjdBb0dBSlhDRVZaN1hZWjhUVFVvWElXUjAKUXY0N2lOMjczSDAxcjhqd0ZxOEdVTGt4SEZWK0cyV3ptbnZtN0JQeUhOYTNrWjVlUEd2NXhUVEhaOW5sc0l0WQprUC9iaUVPc05nQjhlczBwWnQyNEROZUhic3dMakFZc1hWOXZjdFRmazFSYmZwUHB2WXZNRnRVOW5sVEVHNjdKCm9aM2hLa1BFczlBQXYwRzRNSXpNeDFrQ2dZRUF5UnI3cGN5NnZzdUMzMmI5T1VtcHN2MFJ4cVpEUHd0Z295dDUKV3dpVjlGOS9WR2xHa2U5dDQ1OWVxcGtOaDRCWHIwVmNySVVaMzQ4NVd3KzRobDhpVDRqaEtCcHlPQWJWNUFmSQplVXMzdnRudk5weVdHWG1sRGF2dVU5TnE3aWR2LzBjcmlNY1cvQlFscENqUTRKWUVMd3A4UTkrQXVQMnBEU245Cjh5UTJ3ejhDZ1lCb1htdGZyQUR6NGdRTWhrYWxPUk93VnkvcUtDajhPQlpjRklhZkFkclRDbXVJMlVlcUg1aXEKc3didktidENFOHVIemlIMzk3OW0vVklpYlNqTTFIL285L2VWNzNTQVE2TnVLRG12Nk5BL25UVnhYT0RxQzJzcQpsSDNaWGR5MXhsVzIrOXlIaTNIb3I3OTBPU3A4amsxQkg5QmMvV093bnN1RkhxZXlFSjhoT2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=